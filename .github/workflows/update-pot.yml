name: Update POT file 🌐

on:
  workflow_call:
    inputs:
      domain:
        type: string
        description: "Text domain for the POT file"
        required: true
      slug:
        type: string
        description: "Project slug"
        required: true
      package_name:
        type: string
        description: "Package name for the header in the POT file"
        required: true
      headers:
        type: string
        description: "Additional headers in JSON format"
        required: true
      pull_request_number:
        type: number
        description: "Pull request number (optional for direct merges)"
        required: false
    secrets:
      PAT_FOR_GITHUB_ACTIONS:
        description: "Personal Access Token for GitHub Actions"
        required: true

jobs:
  update-pot:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_FOR_GITHUB_ACTIONS }}

      - name: Get pull request information
        id: get_pr_info
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ inputs.pull_request_number || 'null' }};

            if (prNumber && prNumber !== '' && prNumber !== 'null') {
              // Handle PR-based workflow
              const pr = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });

              const labels = pr.data.labels.map(label => label.name).join(',');
              const headRef = pr.data.head.ref;
              const headSha = pr.data.head.sha;

              console.log('Pull request labels:', labels);
              console.log('Head ref:', headRef);
              console.log('Head SHA:', headSha);

              core.setOutput('labels', labels);
              core.setOutput('head_ref', headRef);
              core.setOutput('head_sha', headSha);
              core.setOutput('is_pr', 'true');

              // Check if this is an autorelease PR
              const isAutorelease = labels.includes('autorelease');
              core.setOutput('skip_pot_update', isAutorelease);
            } else {
              // Handle direct merge to dev
              console.log('No PR number provided - handling direct merge');
              core.setOutput('labels', '');
              core.setOutput('head_ref', context.ref.replace('refs/heads/', ''));
              core.setOutput('head_sha', context.sha);
              core.setOutput('is_pr', 'false');
              core.setOutput('skip_pot_update', 'false');
            }
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_FOR_GITHUB_ACTIONS }}

      - name: Set up PHP
        if: steps.get_pr_info.outputs.skip_pot_update == 'false'
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          tools: wp-cli/wp-cli-bundle

      - name: Checkout branch
        if: steps.get_pr_info.outputs.skip_pot_update == 'false' && steps.get_pr_info.outputs.is_pr == 'true'
        run: |
          git checkout ${{ steps.get_pr_info.outputs.head_ref }}

      - name: Update POT file
        if: steps.get_pr_info.outputs.skip_pot_update == 'false'
        run: |
          mkdir -p languages
          wp i18n make-pot . languages/${{ github.event.repository.name }}.pot \
            --domain=${{ inputs.domain }} \
            --slug=${{ inputs.slug }} \
            --package-name="${{ inputs.package_name }}" \
            --headers='${{ inputs.headers }}'

      - name: Configure Git
        if: steps.get_pr_info.outputs.skip_pot_update == 'false'
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Check for changes and commit
        id: check_changes
        if: steps.get_pr_info.outputs.skip_pot_update == 'false'
        run: |
          POT_FILE="languages/${{ github.event.repository.name }}.pot"
          POT_UPDATED="false"

          # Check if POT file exists and has meaningful changes (not just timestamps or line numbers)
          if [ -f "$POT_FILE" ]; then
            # Remove timestamp, line number references, and other non-translation content for comparison
            git show HEAD:"$POT_FILE" 2>/dev/null | sed '/^"POT-Creation-Date:/d; /^"PO-Revision-Date:/d; /^#:/d; /^#\./d; /^# /d' | sort > "${POT_FILE}.old" || touch "${POT_FILE}.old"
            sed '/^"POT-Creation-Date:/d; /^"PO-Revision-Date:/d; /^#:/d; /^#\./d; /^# /d' "$POT_FILE" | sort > "${POT_FILE}.new"

            # Compare the files without metadata and line references
            if diff -q "${POT_FILE}.old" "${POT_FILE}.new" > /dev/null 2>&1; then
              echo "POT file has only metadata/line number changes, skipping updates"
              POT_UPDATED="false"
              rm -f "${POT_FILE}.old" "${POT_FILE}.new"
            else
              echo "POT file has meaningful translation changes (new/updated strings)"
              POT_UPDATED="true"
              rm -f "${POT_FILE}.old" "${POT_FILE}.new"
              git add "$POT_FILE"
            fi
          else
            echo "POT file doesn't exist, creating new one"
            POT_UPDATED="true"
            git add "$POT_FILE"
          fi

          echo "pot_updated=${POT_UPDATED}" >> $GITHUB_OUTPUT

          # Only commit if there are meaningful changes
          if [[ "$POT_UPDATED" == "true" ]]; then
            if [[ "${{ steps.get_pr_info.outputs.is_pr }}" == "true" ]]; then
              echo "Committing to PR branch..."

              # Get the latest commit message
              LAST_COMMIT_MSG=$(git log -1 --pretty=%B)

              # Check if the last commit was already a POT update
              if [[ "$LAST_COMMIT_MSG" == *"Update POT file"* ]] || [[ "$LAST_COMMIT_MSG" == *"update POT file"* ]]; then
                echo "Amending existing POT update commit"
                git commit --amend --no-edit
              else
                echo "Creating new POT update commit"
                git commit -m "chore: update POT file for translations"
              fi

              git push origin ${{ steps.get_pr_info.outputs.head_ref }} --force-with-lease
            else
              echo "Direct merge detected - will create PR for POT updates"
              git stash push -m "POT file updates"
            fi
          fi

      - name: Create or update PR for POT updates
        if: steps.get_pr_info.outputs.skip_pot_update == 'false' && steps.get_pr_info.outputs.is_pr == 'false' && steps.check_changes.outputs.pot_updated == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const baseBranch = '${{ steps.get_pr_info.outputs.head_ref }}';
            const branchName = `pot-updates-${context.repo.repo}`; // Fixed branch name instead of timestamp
            const { execSync } = require('child_process');

            // Check if there's already an open PR for POT updates
            const existingPRs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `${context.repo.owner}:${branchName}`,
              base: baseBranch
            });

            let prExists = existingPRs.data.length > 0;
            let pr;

            if (prExists) {
              console.log(`Found existing PR for POT updates: #${existingPRs.data[0].number}`);
              pr = existingPRs.data[0];
              
              // Update existing branch with new changes
              try {
                execSync(`git fetch origin`);
                execSync(`git checkout ${branchName} || git checkout -b ${branchName} origin/${branchName}`);
                execSync(`git stash pop`);
                execSync(`git add languages/${context.repo.repo}.pot`);
                
                // Check if there are any changes to commit
                const hasChanges = execSync(`git diff --cached --quiet || echo "has_changes"`, { encoding: 'utf8' }).trim();
                
                if (hasChanges === 'has_changes') {
                  execSync(`git commit -m "chore: update POT file for translations"`);
                  execSync(`git push origin ${branchName} --force-with-lease`);
                  console.log(`Updated existing PR #${pr.number} with new POT changes`);
                } else {
                  console.log('No changes to commit to existing PR');
                }
              } catch (error) {
                console.log('Error updating existing PR:', error.message);
                // If updating fails, we'll create a new PR below
                prExists = false;
              }
            }

            if (!prExists) {
              try {
                // Create a new branch for the POT updates
                await github.rest.git.createRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `refs/heads/${branchName}`,
                  sha: context.sha
                });
              } catch (error) {
                // Branch might already exist, try to use it
                console.log('Branch might already exist, continuing...');
              }

              // Apply the stashed changes to the branch
              execSync(`git fetch origin`);
              execSync(`git checkout ${branchName} || git checkout -b ${branchName}`);
              execSync(`git stash pop`);
              execSync(`git add languages/${context.repo.repo}.pot`);
              execSync(`git commit -m "chore: update POT file for translations"`);
              execSync(`git push origin ${branchName} --force`);

              // Create the pull request
              pr = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `chore(i18n): update POT file for translations`,
                head: branchName,
                base: baseBranch,
                body: `This PR was automatically created to update the POT file with new translation strings.

                      The POT file has been updated following changes to the ${baseBranch} branch.

                      🤖 Generated by GitHub Actions`
              });

              console.log(`Created PR #${pr.data.number}: ${pr.data.html_url}`);

              // Add a label to the PR
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.data.number,
                labels: ['translations', 'auto-generated']
              });
            }
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_FOR_GITHUB_ACTIONS }}

      - name: Add comment to PR
        if: steps.get_pr_info.outputs.skip_pot_update == 'false' && steps.get_pr_info.outputs.is_pr == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            // Check if POT file was updated
            const { execSync } = require('child_process');

            try {
              const potPath = `languages/${context.repo.repo}.pot`;
              const result = execSync(`git log -1 --name-only --pretty=format: | grep -q "${potPath}" && echo "updated" || echo "no_changes"`, { encoding: 'utf8' }).trim();

              if (result === 'updated') {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: ${{ inputs.pull_request_number }},
                  body: '🌐 POT file has been automatically updated for translations.'
                });
              }
            } catch (error) {
              console.log('Could not determine POT file status or add comment:', error.message);
            }
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_FOR_GITHUB_ACTIONS }}
