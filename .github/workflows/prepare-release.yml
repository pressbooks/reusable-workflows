name: ðŸ¤– Release Process ðŸš€

on:
  workflow_call:

permissions:
  contents: write
  pull-requests: write

jobs:
  release-please:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.PAT_FOR_GITHUB_ACTIONS }}
      - name: Set Environment Variables
        if: ${{ steps.release.outputs.release_created }}
        run: |
          echo "GITHUB_REPO_SLUG=$(basename $GITHUB_WORKSPACE)" >> $GITHUB_ENV
          echo "GITHUB_TAG=${{ steps.release.outputs.tag_name }}" >> $GITHUB_ENV
      - name: Prepare artifact
        if: ${{ steps.release.outputs.release_created }}
        run: |
          export COMPOSER_MEMORY_LIMIT=-1
          export GITHUB_BUILD_PATH=${{ github.workspace }}
          echo "File to be created : $GITHUB_BUILD_PATH/$GITHUB_REPO_SLUG-$GITHUB_TAG.zip"
          curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
          chmod +x wp-cli.phar
          mv wp-cli.phar /usr/local/bin/wp
          wp package install wp-cli/dist-archive-command
          npm install
          npm run build --if-present
          composer install --no-dev --optimize-autoloader
          cd ..
          wp dist-archive $GITHUB_REPO_SLUG $GITHUB_BUILD_PATH/$GITHUB_REPO_SLUG-$GITHUB_TAG.zip
          cd $GITHUB_BUILD_PATH
          ls $GITHUB_BUILD_PATH
      - name: Upload release artifact
        if: ${{ steps.release.outputs.release_created }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_FOR_GITHUB_ACTIONS }}
        run: gh release upload ${{ steps.release.outputs.tag_name }} ${{github.workspace}}/$GITHUB_REPO_SLUG-$GITHUB_TAG.zip --clobber
      - name: Extract GitHub Repo Name
        id: repo_name
        run: |
            REPO_NAME=$(echo "${{ github.repository }}" | awk -F'/' '{print $2}')
            echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
      - name: Get latest release info
        if: ${{ steps.release.outputs.release_created }}
        id: get_release
        run: |
          REPO="${{ github.repository }}"
          TAG_NAME="${{ steps.release.outputs.tag_name }}"
          RELEASE_DATA=$(gh release view "$TAG_NAME" --repo "$REPO" --json tagName,url,body)
          RELEASE_URL=$(echo "$RELEASE_DATA" | jq -r '.url')
          RELEASE_NOTES=$(echo "$RELEASE_DATA" | jq -r '.body')
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          echo "RELEASE_URL=$RELEASE_URL" >> $GITHUB_ENV
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Send Slack Notification
        if: ${{ steps.release.outputs.release_created }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_RELEASES_WEBHOOK }}
          SLACK_MESSAGE: |
            *ðŸŽ‰ New release for `${{ github.repository }}` published! ðŸš€*
            *Version:* `${{ env.TAG_NAME }}`
            ${{ env.RELEASE_NOTES }}
            *More details:* ${{ env.RELEASE_URL }}
          SLACK_USERNAME: "PB Release Bot"
          SLACK_ICON_EMOJI: ":pb:"
          SLACK_CHANNEL: "latest-releases"
          SLACK_FOOTER: ""
          MSG_MINIMAL: 1
      - name: Trigger staging bedrock updates
        if: ${{ steps.release.outputs.release_created }}
        uses: pressbooks/composer-autoupdate-bedrock@main
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SNS_ARN_DEV: ${{ secrets.AWS_SNS_ARN_DEV }}
          AWS_SNS_ARN_STAGING: ${{ secrets.AWS_SNS_ARN_STAGING }}
          INPUT_TRIGGERED_BY: ${{ github.repository }}
          REF: ${{ steps.release.outputs.tag_name }}